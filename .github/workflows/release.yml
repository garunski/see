name: Release

on:
  workflow_dispatch:
    inputs:
      bump_type:
        description: 'Version bump type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major
  push:
    tags:
      - 'v*.*.*'

permissions:
  contents: write
  pull-requests: write

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  version-bump:
    name: Version Management
    runs-on: macos-latest
    if: github.event_name == 'workflow_dispatch'
    outputs:
      new_version: ${{ steps.bump.outputs.new_version }}
      new_tag: ${{ steps.bump.outputs.new_tag }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "version-bump-cache"

      - name: Cache cargo-edit
        id: cache-cargo-edit
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-set-version
          key: ${{ runner.os }}-cargo-edit

      - name: Install cargo-edit
        if: steps.cache-cargo-edit.outputs.cache-hit != 'true'
        run: cargo install cargo-edit

      - name: Parse current version
        id: current
        run: |
          CURRENT_VERSION=$(cargo metadata --no-deps --format-version 1 | jq -r '.packages[] | select(.name == "s_e_e_gui") | .version')
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "Current version: $CURRENT_VERSION"

      - name: Calculate new version
        id: bump
        run: |
          CURRENT="${{ steps.current.outputs.current_version }}"
          BUMP_TYPE="${{ github.event.inputs.bump_type }}"
          
          IFS='.' read -r MAJOR MINOR PATCH <<< "$CURRENT"
          
          case "$BUMP_TYPE" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          NEW_TAG="v$NEW_VERSION"
          
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=$NEW_TAG" >> $GITHUB_OUTPUT
          echo "New version: $NEW_VERSION"

      - name: Bump version in workspace
        run: |
          cargo set-version --workspace ${{ steps.bump.outputs.new_version }}

      - name: Commit and tag version bump
        run: |
          git add .
          git commit -m "chore: bump version to ${{ steps.bump.outputs.new_tag }}"
          git tag ${{ steps.bump.outputs.new_tag }}
          git push origin main
          git push origin ${{ steps.bump.outputs.new_tag }}

  build-and-release:
    name: Build and Release
    runs-on: macos-latest
    needs: [version-bump]
    if: |
      always() &&
      (needs.version-bump.result == 'success' || 
       needs.version-bump.result == 'skipped')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # For manual dispatch, fetch the latest code with the new tag
            git fetch --tags
            VERSION="${{ needs.version-bump.outputs.new_version }}"
            TAG="${{ needs.version-bump.outputs.new_tag }}"
          else
            # For tag push, extract from the tag
            TAG="${GITHUB_REF#refs/tags/}"
            VERSION="${TAG#v}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION (tag: $TAG)"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            icons/package-lock.json
            tailwind/package-lock.json
            react-flow-app/package-lock.json

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "release-cache"
          cache-all-crates: true

      - name: Cache cargo-binstall
        id: cache-binstall
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/cargo-binstall
          key: ${{ runner.os }}-cargo-binstall-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Dioxus CLI
        id: cache-dx
        uses: actions/cache@v4
        with:
          path: ~/.cargo/bin/dx
          key: ${{ runner.os }}-dioxus-cli-${{ hashFiles('**/Cargo.lock') }}

      - name: Build icons
        run: |
          cd icons
          npm ci
          npm run build

      - name: Build Tailwind CSS
        run: |
          cd tailwind
          npm ci
          npm run build

      - name: Build React Flow visualizer
        run: |
          cd react-flow-app
          npm ci
          npm run build

      - name: Install cargo-binstall
        if: steps.cache-binstall.outputs.cache-hit != 'true'
        run: |
          curl -L --proto '=https' --tlsv1.2 -sSf https://raw.githubusercontent.com/cargo-bins/cargo-binstall/main/install-from-binstall-release.sh | bash

      - name: Install Dioxus CLI
        if: steps.cache-dx.outputs.cache-hit != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo binstall dioxus-cli --no-confirm

      - name: Import code signing certificate
        if: github.event_name == 'workflow_dispatch' || startsWith(github.ref, 'refs/tags/')
        env:
          APPLE_CERTIFICATE_BASE64: ${{ secrets.APPLE_CERTIFICATE_BASE64 }}
          APPLE_CERTIFICATE_PASSWORD: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}
        run: |
          # Check if certificate is available
          if [ -z "$APPLE_CERTIFICATE_BASE64" ]; then
            echo "‚ö†Ô∏è  No signing certificate found - will build unsigned"
            echo "signed=false" >> $GITHUB_ENV
            exit 0
          fi
          
          echo "üîê Importing signing certificate..."
          
          # Create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          KEYCHAIN_PASSWORD=$(openssl rand -base64 32)
          
          # Decode certificate
          echo "$APPLE_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          
          # Create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          # Import certificate to keychain
          security import $CERTIFICATE_PATH -P "$APPLE_CERTIFICATE_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          
          # Enable codesigning from the keychain
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          
          echo "‚úÖ Certificate imported successfully"
          echo "signed=true" >> $GITHUB_ENV

      - name: Build desktop app bundle
        id: bundle
        run: |
          # Ensure cargo bin is in PATH
          export PATH="$HOME/.cargo/bin:$PATH"
          
          # Debug: Check environment
          echo "PATH=$PATH"
          echo "CARGO_HOME=$CARGO_HOME"
          echo "Checking for dx..."
          which dx || echo "dx not in PATH"
          ls -la "$HOME/.cargo/bin/" | grep dx || echo "dx not in cargo bin"
          
          # If dx not found, install it
          if ! which dx; then
            echo "Installing dx..."
            GITHUB_TOKEN="${{ secrets.GITHUB_TOKEN }}" cargo binstall dioxus-cli --no-confirm --force
          fi
          
          # Verify dx is now available
          which dx
          dx --version
          
          # Build the app bundle (without creating DMG yet)
          dx bundle --package s_e_e_gui --release --json-output 2>&1 | tee bundle_output.log
          
          # Extract the .app path from the bundle output
          APP_PATH=$(grep "Bundled app at:.*\.app" bundle_output.log | grep -o "/.*\.app" | head -1)
          
          if [ -z "$APP_PATH" ]; then
            echo "Error: .app bundle not found in bundle output"
            echo "Bundle output:"
            cat bundle_output.log
            echo "Searching for .app bundles:"
            find target/dx -name "*.app" -type d || echo "No .app found"
            exit 1
          fi
          
          # Verify the app bundle exists
          if [ ! -d "$APP_PATH" ]; then
            echo "Error: .app bundle not found at $APP_PATH"
            exit 1
          fi
          
          echo "app_path=$APP_PATH" >> $GITHUB_OUTPUT
          echo "App bundle created at: $APP_PATH"

      - name: Sign app bundle
        if: env.signed == 'true'
        env:
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          APP_PATH="${{ steps.bundle.outputs.app_path }}"
          
          echo "üîè Signing app bundle..."
          
          # Sign all frameworks and dylibs first
          find "$APP_PATH/Contents" -name "*.dylib" -o -name "*.framework" | while read file; do
            echo "Signing: $file"
            codesign --force --sign "Developer ID Application: Garun N Vagidov (6UUQ92953S)" \
              --options runtime \
              --timestamp \
              --deep \
              "$file" || true
          done
          
          # Sign the main app bundle
          codesign --force --sign "Developer ID Application: Garun N Vagidov (6UUQ92953S)" \
            --options runtime \
            --entitlements gui/Entitlements.plist \
            --timestamp \
            --deep \
            "$APP_PATH"
          
          # Verify signature
          codesign --verify --verbose=4 "$APP_PATH"
          spctl -a -vv "$APP_PATH" || echo "‚ö†Ô∏è  Gatekeeper check will pass after notarization"
          
          echo "‚úÖ App signed successfully"

      - name: Notarize app
        if: env.signed == 'true'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          APP_PATH="${{ steps.bundle.outputs.app_path }}"
          
          echo "üì§ Notarizing app..."
          
          # Create a zip for notarization (faster than DMG)
          ditto -c -k --keepParent "$APP_PATH" "$APP_PATH.zip"
          
          # Submit for notarization
          xcrun notarytool submit "$APP_PATH.zip" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait \
            --timeout 30m
          
          # Staple the notarization ticket
          xcrun stapler staple "$APP_PATH"
          
          # Clean up zip
          rm "$APP_PATH.zip"
          
          # Verify notarization
          spctl -a -vv "$APP_PATH"
          
          echo "‚úÖ App notarized and stapled successfully"

      - name: Create DMG
        id: create_dmg
        run: |
          APP_PATH="${{ steps.bundle.outputs.app_path }}"
          VERSION="${{ steps.version.outputs.version }}"
          DMG_NAME="SEEGui-${VERSION}-macos.dmg"
          DMG_PATH="$PWD/$DMG_NAME"
          
          echo "üì¶ Creating DMG..."
          
          # Install create-dmg if not available
          if ! command -v create-dmg &> /dev/null; then
            brew install create-dmg
          fi
          
          # Create DMG with the signed app
          create-dmg \
            --volname "SEE GUI" \
            --window-pos 200 120 \
            --window-size 800 400 \
            --icon-size 100 \
            --icon "SEEGui.app" 200 190 \
            --hide-extension "SEEGui.app" \
            --app-drop-link 600 185 \
            --no-internet-enable \
            "$DMG_PATH" \
            "$APP_PATH" || {
              # If create-dmg fails with icon, try without custom positioning
              hdiutil create -volname "SEE GUI" -srcfolder "$APP_PATH" -ov -format UDZO "$DMG_PATH"
            }
          
          echo "dmg_path=$DMG_PATH" >> $GITHUB_OUTPUT
          echo "dmg_filename=$DMG_NAME" >> $GITHUB_OUTPUT
          echo "DMG created at: $DMG_PATH"
          
          # Verify DMG exists
          if [ ! -f "$DMG_PATH" ]; then
            echo "Error: DMG file not found at $DMG_PATH"
            exit 1
          fi

      - name: Sign and notarize DMG
        if: env.signed == 'true'
        env:
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        run: |
          DMG_PATH="${{ steps.create_dmg.outputs.dmg_path }}"
          
          echo "üîè Signing DMG..."
          codesign --force --sign "Developer ID Application: Garun N Vagidov (6UUQ92953S)" \
            --timestamp \
            "$DMG_PATH"
          
          echo "üì§ Notarizing DMG..."
          xcrun notarytool submit "$DMG_PATH" \
            --apple-id "$APPLE_ID" \
            --password "$APPLE_APP_SPECIFIC_PASSWORD" \
            --team-id "$APPLE_TEAM_ID" \
            --wait \
            --timeout 30m
          
          echo "üìå Stapling notarization to DMG..."
          xcrun stapler staple "$DMG_PATH"
          
          echo "‚úÖ DMG signed and notarized successfully"

      - name: Build CLI binary
        run: |
          cargo build --package s_e_e_cli --release
          
          # Strip binary for smaller size
          strip target/release/s_e_e_cli

      - name: Create CLI archive
        id: cli_archive
        run: |
          CLI_ARCHIVE="s_e_e_cli-${{ steps.version.outputs.tag }}-macos-aarch64.tar.gz"
          
          cd target/release
          tar czf "../../$CLI_ARCHIVE" s_e_e_cli
          cd ../..
          
          echo "cli_archive=$CLI_ARCHIVE" >> $GITHUB_OUTPUT
          echo "CLI archive created: $CLI_ARCHIVE"
          
          # Verify archive exists
          if [ ! -f "$CLI_ARCHIVE" ]; then
            echo "Error: CLI archive not found"
            exit 1
          fi

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.create_dmg.outputs.dmg_filename }}
          path: ${{ steps.create_dmg.outputs.dmg_path }}
          retention-days: 90

      - name: Upload CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.cli_archive.outputs.cli_archive }}
          path: ${{ steps.cli_archive.outputs.cli_archive }}
          retention-days: 90

  build-windows:
    name: Build Windows
    runs-on: windows-latest
    if: always()
    needs: version-bump
    outputs:
      msi_path: ${{ steps.bundle.outputs.msi_path }}
      msi_filename: ${{ steps.bundle.outputs.msi_filename }}
      cli_archive: ${{ steps.cli_archive.outputs.cli_archive }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        shell: bash
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            # For manual dispatch, fetch the latest code with the new tag
            git fetch --tags
            VERSION="${{ needs.version-bump.outputs.new_version }}"
            TAG="${{ needs.version-bump.outputs.new_tag }}"
          else
            # For tag push, extract from the tag
            TAG="${GITHUB_REF#refs/tags/}"
            VERSION="${TAG#v}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION (tag: $TAG)"

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: x86_64-pc-windows-msvc

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: |
            icons/package-lock.json
            tailwind/package-lock.json
            react-flow-app/package-lock.json

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: "release-cache-windows"
          cache-all-crates: true

      - name: Cache cargo-binstall
        id: cache-binstall
        uses: actions/cache@v4
        with:
          path: ~\.cargo\bin\cargo-binstall.exe
          key: ${{ runner.os }}-cargo-binstall-${{ hashFiles('**/Cargo.lock') }}

      - name: Cache Dioxus CLI
        id: cache-dx
        uses: actions/cache@v4
        with:
          path: ~\.cargo\bin\dx.exe
          key: ${{ runner.os }}-dioxus-cli-${{ hashFiles('**/Cargo.lock') }}

      - name: Build icons
        run: |
          cd icons
          npm ci
          npm run build

      - name: Build Tailwind CSS
        run: |
          cd tailwind
          npm ci
          npm run build

      - name: Build React Flow visualizer
        run: |
          cd react-flow-app
          npm ci
          npm run build

      - name: Install cargo-binstall
        if: steps.cache-binstall.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Invoke-WebRequest -Uri "https://github.com/cargo-bins/cargo-binstall/releases/latest/download/cargo-binstall-x86_64-pc-windows-msvc.zip" -OutFile "cargo-binstall.zip"
          Expand-Archive -Path "cargo-binstall.zip" -DestinationPath "$env:USERPROFILE\.cargo\bin"

      - name: Install Dioxus CLI
        if: steps.cache-dx.outputs.cache-hit != 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: cargo binstall dioxus-cli --no-confirm

      - name: Build desktop app bundle
        id: bundle
        shell: pwsh
        run: |
          # Ensure cargo bin is in PATH
          $env:PATH = "$env:USERPROFILE\.cargo\bin;$env:PATH"
          
          # Debug: Check environment
          Write-Host "PATH=$env:PATH"
          Write-Host "CARGO_HOME=$env:CARGO_HOME"
          Write-Host "Checking for dx..."
          Get-Command dx -ErrorAction SilentlyContinue
          
          # If dx not found, install it
          if (-not (Get-Command dx -ErrorAction SilentlyContinue)) {
            Write-Host "Installing dx..."
            $env:GITHUB_TOKEN = "${{ secrets.GITHUB_TOKEN }}"
            cargo binstall dioxus-cli --no-confirm --force
          }
          
          # Verify dx is now available
          dx --version
          
          dx bundle --package s_e_e_gui --release 2>&1 | Tee-Object -FilePath bundle_output.log
          
          # Extract MSI path from the log - look for line with .msi
          $MSI_LINE = (Select-String -Path bundle_output.log -Pattern "Bundled app at:.*\.msi" | Select-Object -First 1).Line
          if ($MSI_LINE -match '(?:Bundled app at: )(.+\.msi)') {
            $MSI_PATH = $matches[1].Trim()
          } else {
            Write-Host "Error: MSI path not found in bundle output"
            Get-Content bundle_output.log
            exit 1
          }
          
          "msi_path=$MSI_PATH" >> $env:GITHUB_OUTPUT
          Write-Host "MSI created at: $MSI_PATH"
          
          # Verify MSI exists
          if (-not (Test-Path $MSI_PATH)) {
            Write-Host "Error: MSI file not found at $MSI_PATH"
            Get-ChildItem (Split-Path $MSI_PATH)
            exit 1
          }
          
          # Get MSI filename
          $MSI_FILENAME = Split-Path $MSI_PATH -Leaf
          "msi_filename=$MSI_FILENAME" >> $env:GITHUB_OUTPUT
          Write-Host "MSI filename: $MSI_FILENAME"

      - name: Build CLI binary
        run: |
          cargo build --package s_e_e_cli --release

      - name: Create CLI archive
        id: cli_archive
        shell: pwsh
        run: |
          $CLI_ARCHIVE = "s_e_e_cli-${{ steps.version.outputs.tag }}-windows-x64.zip"
          
          Compress-Archive -Path target\release\s_e_e_cli.exe -DestinationPath $CLI_ARCHIVE
          
          "cli_archive=$CLI_ARCHIVE" >> $env:GITHUB_OUTPUT
          Write-Host "CLI archive created: $CLI_ARCHIVE"
          
          # Verify archive exists
          if (-not (Test-Path $CLI_ARCHIVE)) {
            Write-Host "Error: CLI archive not found"
            exit 1
          }

      - name: Upload MSI artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.bundle.outputs.msi_filename }}
          path: ${{ steps.bundle.outputs.msi_path }}
          retention-days: 90

      - name: Upload CLI artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.cli_archive.outputs.cli_archive }}
          path: ${{ steps.cli_archive.outputs.cli_archive }}
          retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-and-release, build-windows]
    if: always() && (needs.build-and-release.result == 'success' || needs.build-windows.result == 'success')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            VERSION="${{ needs.version-bump.outputs.new_version }}"
            TAG="${{ needs.version-bump.outputs.new_tag }}"
          else
            TAG="${GITHUB_REF#refs/tags/}"
            VERSION="${TAG#v}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=$TAG" >> $GITHUB_OUTPUT

      - name: Download macOS artifacts
        if: needs.build-and-release.result == 'success'
        uses: actions/download-artifact@v4
        with:
          path: artifacts-macos

      - name: Download Windows artifacts
        if: needs.build-windows.result == 'success'
        uses: actions/download-artifact@v4
        with:
          path: artifacts-windows

      - name: List artifacts
        run: |
          echo "macOS artifacts:"
          ls -R artifacts-macos/ || echo "No macOS artifacts"
          echo "Windows artifacts:"
          ls -R artifacts-windows/ || echo "No Windows artifacts"

      - name: Create GitHub Release
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Collect all artifacts
          ARTIFACTS=()
          
          # Add macOS artifacts if available
          if [ -d "artifacts-macos" ]; then
            for file in artifacts-macos/**/*; do
              if [ -f "$file" ]; then
                ARTIFACTS+=("$file")
              fi
            done
          fi
          
          # Add Windows artifacts if available
          if [ -d "artifacts-windows" ]; then
            for file in artifacts-windows/**/*; do
              if [ -f "$file" ]; then
                ARTIFACTS+=("$file")
              fi
            done
          fi
          
          # Create release with all artifacts
          gh release create "${{ steps.version.outputs.tag }}" \
            --title "Release ${{ steps.version.outputs.tag }}" \
            --generate-notes \
            "${ARTIFACTS[@]}"

