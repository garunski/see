version: '3'

env:
  RUST_LOG: s_e_e_core=trace,s_e_e_gui=trace,s_e_e_engine=trace

tasks:
  quality:
    desc: Run all quality checks (formatting, linting, tests, file size)
    cmds:
      # Build assets first before quality checks
      - task: visualizer
      - task: tailwind
      - task: icons
      # Now run quality checks
      - cargo fmt -- --check
      - cargo clippy --all-targets --all-features -- -D warnings
      - cargo nextest run
      - |
        echo "Running npm audit for react-flow-app..."
        cd react-flow-app && npm audit --production
      - |
        echo "Running npm audit for tailwind..."
        cd tailwind && npm audit --production
      - |
        echo "Running npm audit for icons..."
        cd icons && npm audit --production
      - |
        find . -name "*.rs" -not -path "./target/*" | xargs wc -l | awk '$1 > 200 && $2 != "total" {print "‚ö†Ô∏è  " $2 " (" $1 " lines) - create an aggressive refactoring plan that completely eliminates this bloated file by breaking it into focused, single-responsibility modules, removing all legacy patterns, deleting unused code without any #[allow(dead_code)] bullshit, and modernizing the API contracts - I want zero warnings, zero dead code, and a clean architecture that actually makes sense."}' | head -10

  run-gui:
    desc: Run GUI with dx CLI
    cmds:
      - task: tailwind
      - task: icons
      - task: visualizer
      - task: fmt
      - dx run --package s_e_e_gui

  clean:
    desc: Clean build artifacts
    cmds:
      - cargo clean
      - dx clean
      - rm -rf react-flow-app/node_modules
      - rm -rf tailwind/node_modules
      - rm -rf gui/assets/workflow-visualizer
      - rm -f gui/assets/tailwind.css

  fmt:
    desc: Format code
    internal: true
    cmds:
      - cargo fmt
      - cargo clippy

  tailwind:
    desc: Build Tailwind CSS for main GUI and React Flow apps
    internal: true
    dir: tailwind
    cmds:
      - npm install
      - npm run build

  icons:
    desc: Build SVG icons for the GUI app
    internal: true
    dir: icons
    cmds:
      - npm install
      - npm run build

  visualizer:
    desc: Build React Flow workflow visualizer
    internal: true
    dir: react-flow-app
    cmds:
      - npm install
      - npm run build

  clear-db:
    desc: Deletes the database completely and resets data directory
    cmds:
      - rm -f ~/.s_e_e/data.db
      - rm -f ~/.s_e_e/data.db-wal
      - rm -f ~/.s_e_e/data.db-shm
      - rm -f ~/.s_e_e/audit.redb
      - echo "‚úÖ Database cleared successfully"

  build-release:
    desc: Build release DMG locally (mimics GitHub workflow)
    cmds:
      # Clean temp directory
      - rm -rf ./.tmp-release
      - mkdir -p ./.tmp-release
      
      # Build all frontend assets (same order as CI)
      - task: icons
      - task: tailwind
      - task: visualizer
      
      # Bundle the app
      - |
        echo "üì¶ Building release bundle..."
        dx bundle --package s_e_e_gui --release 2>&1 | tee ./.tmp-release/bundle_output.log
      
      # Extract DMG path
      - |
        DMG_PATH=$(grep "Bundled app at:.*\.dmg" ./.tmp-release/bundle_output.log | grep -o "/.*\.dmg" | head -1)
        if [ -z "$DMG_PATH" ]; then
          echo "‚ùå Error: DMG path not found in bundle output"
          exit 1
        fi
        echo "‚úÖ DMG created at: $DMG_PATH"
        
        # Copy to temp directory for easy access
        cp "$DMG_PATH" ./.tmp-release/
        DMG_NAME=$(basename "$DMG_PATH")
        echo "üìã Copied to: ./.tmp-release/$DMG_NAME"
        
        # Also copy the .app bundle for inspection
        APP_PATH=$(grep "Bundled app at:.*\.app\"" ./.tmp-release/bundle_output.log | grep -o "/.*\.app" | head -1)
        if [ ! -z "$APP_PATH" ]; then
          cp -r "$APP_PATH" ./.tmp-release/
          echo "üìã App bundle: ./.tmp-release/$(basename "$APP_PATH")"
        fi
      
      # Print diagnostic info
      - |
        echo ""
        echo "üîç Bundle Diagnostics:"
        echo "===================="
        
        # Check icon files exist
        echo "üìÅ Icon files:"
        ls -lh icons/dist/macos/see.icns 2>/dev/null && echo "  ‚úÖ macOS .icns exists" || echo "  ‚ùå macOS .icns MISSING"
        ls -lh icons/dist/png/128/see.png 2>/dev/null && echo "  ‚úÖ PNG 128x128 exists" || echo "  ‚ùå PNG 128x128 MISSING"
        
        # Check what's in .tmp-release
        echo ""
        echo "üì¶ Output files:"
        ls -lh ./.tmp-release/
        
        # Check app bundle structure
        APP_BUNDLE=$(find ./.tmp-release -name "*.app" -type d | head -1)
        if [ ! -z "$APP_BUNDLE" ]; then
          echo ""
          echo "üîç App bundle contents:"
          ls -la "$APP_BUNDLE/Contents/"
          if [ -f "$APP_BUNDLE/Contents/Info.plist" ]; then
            echo ""
            echo "üìÑ Info.plist CFBundleIconFile:"
            plutil -p "$APP_BUNDLE/Contents/Info.plist" | grep -i icon || echo "  ‚ö†Ô∏è  No icon entry found"
          fi
          if [ -d "$APP_BUNDLE/Contents/Resources" ]; then
            echo ""
            echo "üñºÔ∏è  Resources folder:"
            ls -la "$APP_BUNDLE/Contents/Resources/" | grep -i icon || echo "  ‚ö†Ô∏è  No icon files in Resources"
          fi
        fi
        
        echo ""
        echo "‚úÖ Build complete! Check ./.tmp-release/ directory"